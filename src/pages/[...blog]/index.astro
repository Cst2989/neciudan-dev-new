---
import merge from 'lodash.merge';
import Layout from '~/layouts/PageLayout.astro';
import SinglePost from '~/components/blog/SinglePost.astro';
import ToBlogLink from '~/components/blog/ToBlogLink.astro';
import type { MetaData, MetaDataImage } from '~/types';

import { getCanonical, getPermalink } from '~/utils/permalinks';
import { getStaticPathsBlogPost, blogPostRobots } from '~/utils/blog';

export const prerender = true;

export async function getStaticPaths() {
  return await getStaticPathsBlogPost();
}

const { post } = Astro.props;
const url = getCanonical(getPermalink(post.permalink, 'post'));

// Get the full URL for the image
const getFullImageUrl = (imagePath: string): string => {
  if (!imagePath) return '';
  if (imagePath.startsWith('http://') || imagePath.startsWith('https://')) {
    return imagePath;
  }
  // Remove leading slash if it exists to avoid double slashes
  const cleanImagePath = imagePath.startsWith('/') ? imagePath.slice(1) : imagePath;
  return new URL(cleanImagePath, Astro.site).toString();
};

const imageUrl = post.image ? getFullImageUrl(post.image) : '';

// Prepare the image object according to MetaDataImage interface
const ogImage: MetaDataImage = {
  url: imageUrl,
  width: 1200,
  height: 630
};

// Base metadata object that matches MetaData interface
const baseMetadata: MetaData = {
  title: post.title,
  description: post.excerpt,
  canonical: url.toString(),
  robots: {
    index: blogPostRobots?.index || true,
    follow: blogPostRobots?.follow || true,
  },
  openGraph: {
    type: 'article',
    url: url.toString(),
    images: imageUrl ? [ogImage] : undefined,
    siteName: 'Neciu Dan'
  },
  twitter: {
    cardType: imageUrl ? 'summary_large_image' : 'summary',
    site: '@neciudan',
    handle: '@neciudan'
  }
};

// Merge with any additional metadata from the post
const metadata = merge(
  baseMetadata,
  post?.metadata || {}
);
---

<Layout metadata={metadata}>
  <SinglePost post={{ ...post, image: imageUrl }} url={url} />
  <ToBlogLink />
</Layout>
