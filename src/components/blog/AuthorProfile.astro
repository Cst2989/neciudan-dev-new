---
import Image from '~/components/common/Image.astro';
import SocialShare from '../common/SocialShare.astro';

export interface Props {
  author: {
    name: string;
    image?: string;
  };
  url: string | URL;
  post: {
    title: string;
  };
  date: Date;
}

const { author, date, url, post } = Astro.props;
---

<div class="max-w-3xl mx-auto px-4 sm:px-6 flex flex-col gap-0">
  <div class="flex items-center gap-4">
    {
      author.image && (
        <Image
          src={author.image}
          alt={author.name}
          class="w-12 h-12 rounded-full"
          width={48}
          height={48}
          loading="eager"
          decoding="async"
        />
      )
    }
    <div>
      <h2 class="font-bold">{author.name}</h2>
      <time datetime={date.toISOString()} class="text-sm text-gray-500 dark:text-gray-400">
        {new Date(date).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}
      </time>
    </div>
  </div>

  <p class="text-lg italic text-gray-700 dark:text-gray-300 mt-2 border-t border-b py-4">
    Hi there, it's Dan, a technical co-founder of an ed-tech startup, internation speaker and Staff Software Engineer, I'm here to share insights on combining
    technology and education to solve real problems. <br/> <br/> I write about startup challenges, tech innovations, and the Frontend Development. 
    Subscribe to join me on this journey of transforming education through technology. Want to discuss
    Tech, Frontend or Startup life? <a
      href="https://www.linkedin.com/in/neciudan/"
      class="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300"
      target="_blank">Let's connect.</a
    >
  </p>

  <div class="border-b">
    <form id="inlineSubscribeForm" class="flex flex-col sm:flex-row gap-2 py-6">
      <input
        type="email"
        name="email"
        placeholder="Type your email..."
        class="flex-1 px-4 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 bg-[#1e2432] dark:bg-gray-800"
        required
      />
      <button type="submit" class="submit-btn px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
        <span class="normal-text">Subscribe</span>
        <span class="loading-text hidden">
          <svg class="animate-spin h-5 w-5 inline mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          Subscribing...
        </span>
      </button>
    </form>
  </div>

  <div class="flex gap-2 items-center text-gray-500 py-4">
    <div class="flex gap-4">
      <SocialShare url={url} text={post.title} class="dark:text-slate-600" />
    </div>
  </div>
</div>

<script>
  import Toast from '../Toast';

  const form = document.getElementById('inlineSubscribeForm') as HTMLFormElement;
  
  // Check if user is already subscribed
  const isSubscribed = localStorage.getItem('newsletterSubscribed') === 'true';
  if (isSubscribed) {
    form.style.display = 'none';
  }

  // Listen for subscription events from other components
  window.addEventListener('newsletter:subscribed', () => {
    form.style.display = 'none';
  });

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(e.target as HTMLFormElement);
    const email = formData.get('email');
    const submitBtn = form.querySelector('button[type="submit"]') as HTMLButtonElement;
    const normalText = submitBtn.querySelector('.normal-text') as HTMLElement;
    const loadingText = submitBtn.querySelector('.loading-text') as HTMLElement;

    // Disable button and show loading state
    submitBtn.disabled = true;
    normalText.classList.add('hidden');
    loadingText.classList.remove('hidden');

    try {
      const response = await fetch('/.netlify/functions/subscribe', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email }),
      });

      if (!response.ok) {
        const data = await response.json();
        throw new Error(data.error || 'Subscription failed');
      }

      localStorage.setItem('newsletterSubscribed', 'true');
      window.dispatchEvent(new CustomEvent('newsletter:subscribed'));
      form.style.display = 'none';
      Toast.show('Thank you for subscribing! ðŸŽ‰');
      
    } catch (error) {
      console.error('Subscription error:', error);
      Toast.show('Sorry, there was an error. Please try again later.', 'error');
      
      // Reset button state on error
      submitBtn.disabled = false;
      normalText.classList.remove('hidden');
      loadingText.classList.add('hidden');
    }
  });
</script>
